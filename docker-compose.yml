version: '3.8'

services:
  fraud-detection-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: fraud-detection-api
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics port
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    env_file:
      - .env.${ENV:-development}  # Load environment-specific file
    environment:
      - ENV=${ENV:-development}  # Default to development if ENV is not set
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - ADVANCED_FEATURES=true
      - ENSEMBLE_MODELS=true
      - METRICS_PORT=8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fraud-detection-network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Optional monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-detection-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    environment:
      - ENV=${ENV:-development}  # Default to development if ENV is not set
    networks:
      - fraud-detection-network
    profiles: ["monitoring"]

  # Optional visualization service
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-detection-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    environment:
      - ENV=${ENV:-development}  # Default to development if ENV is not set
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - fraud-detection-network
    profiles: ["monitoring"]

  # You can add a database service if needed in the future
  # fraud-detection-db:
  #   image: postgres:14-alpine
  #   container_name: fraud-detection-db
  #   restart: unless-stopped
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   env_file:
  #     - .env.${ENV:-development}  # Load environment-specific file
  #   environment:
  #     - ENV=${ENV:-development}  # Default to development if ENV is not set
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=fraud_detection
  #   networks:
  #     - fraud-detection-network

networks:
  fraud-detection-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  # postgres_data:
